(()=>{"use strict";function t(){return{addTaskButton:function(){const t=document.querySelector(".button-add-task"),e=document.querySelector(".add-task-popup");t.addEventListener("click",(()=>{e.style.display="block"})),document.querySelector(".button-cancel-task-popup").addEventListener("click",(()=>{e.style.display="none"}))},addProjectButton:function(){const t=document.getElementById("project-btn"),e=document.querySelector(".projectInputDiv");t.addEventListener("click",(()=>{e.style.display="block"})),document.getElementById("project-button-cancel").addEventListener("click",(()=>{e.style.display="none"}))}}}t().addTaskButton(),t().addProjectButton(),function(){const t=document.querySelector("[data-lists]"),e=document.querySelector("[data-new-list-form]"),a=document.querySelector("[data-new-list-input]"),n=document.querySelector("[data-list-display-container]"),d=document.querySelector("[data-list-title]"),s=document.querySelector("[data-list-count]"),i=document.querySelector("[data-tasks]"),c=document.querySelector("[data-new-task-form]"),l=document.querySelector("[data-new-task-input]"),o="task.lists",r="task.selectedListId";let u=JSON.parse(localStorage.getItem(o))||[],p=localStorage.getItem(r);function m(){localStorage.setItem(o,JSON.stringify(u)),localStorage.setItem(r,p)}function k(){y(t),u.forEach((e=>{const a=document.createElement("li"),n=document.createElement("i");n.classList.add("fa","fa-times","xProject"),n.setAttribute("data-delete-list-button",e.id),a.dataset.listId=e.id,a.classList.add("button-project"),a.innerHTML=`<i class="fa fa-tasks" aria-hidden="true"></i>${e.name}`,e.id===p&&a.classList.add("active-list"),a.appendChild(n),t.appendChild(a)}));const e=u.find((t=>t.id===p));null==p?n.style.display="none":(n.style.display="",d.innerText=e.name,f(e),y(i),function(t){t.tasks.forEach((t=>{const e=document.createElement("div");e.classList.add("task-button"),!0===t.complete?(document.getElementById(t.id),e.innerHTML=`\n                    <div class="leftSide-task">\n                            <input class="checkIt" type="checkbox" checked=true id=${t.id} data-check-box>\n                            <p class="task-content">${t.name}</p>\n                            <input type="text" class="input-task-name" data-input-task-name>\n                        </div>\n\n                        <div class="rightSide-task">\n                            <p class="due-date" id="due-date"></p>\n                            <input type="date" class="input-due-date" data-input-due-date>\n                            <i class="fa fa-times xTask" data-delete-task-list=${t.id} aria-hidden="true"></i>\n                        </div>\n                    `):e.innerHTML=`\n                    <div class="leftSide-task">\n                            <input class="checkIt" type="checkbox" id=${t.id} data-check-box>\n                            <p class="task-content">${t.name}</p>\n                            <input type="text" class="input-task-name" data-input-task-name>\n                        </div>\n    \n                        <div class="rightSide-task">\n                            <p class="due-date" id="due-date"></p>\n                            <input type="date" class="input-due-date" data-input-due-date>\n                            <i class="fa fa-times xTask" data-delete-task-list=${t.id} aria-hidden="true"></i>\n                        </div>\n                    `,i.appendChild(e)}))}(e))}function f(t){const e=t.tasks.filter((t=>!t.complete)).length;s.innerText=e}function y(t){for(;t.firstChild;)t.removeChild(t.firstChild)}t.addEventListener("click",(t=>{"li"===t.target.tagName.toLowerCase()&&(p=t.target.dataset.listId,m(),k()),"i"===t.target.tagName.toLowerCase()&&(u=u.filter((e=>e.id!==t.target.dataset.deleteListButton)),p=null,m(),k())})),i.addEventListener("click",(t=>{if("input"===t.target.tagName.toLowerCase()){const e=u.find((t=>t.id===p));e.tasks.find((e=>e.id===t.target.id)).complete=t.target.checked,m(),f(e)}if("i"===t.target.tagName.toLowerCase()){const e=u.find((t=>t.id===p));e.tasks=e.tasks.filter((e=>e.id!==t.target.dataset.deleteTaskList)),m(),k()}})),e.addEventListener("submit",(t=>{t.preventDefault();const e=a.value;if(null==e||""===e)return;const n=(d=e,{id:Math.floor(1e6*Math.random()).toString(),name:d,tasks:[]});var d;a.value=null,u.push(n),m(),k()})),c.addEventListener("submit",(t=>{t.preventDefault();const e=l.value;if(null==e||""===e)return;const a=(n=e,{id:Math.floor(1e5*Math.random()).toString(),name:n,complete:!1});var n;l.value=null,u.find((t=>t.id===p)).tasks.push(a),m(),k()})),k()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,